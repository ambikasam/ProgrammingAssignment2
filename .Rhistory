?square
if [[ length(testData) == length(A3) ]] print("yes")
A3 <- A$getsolve()
if ( length(testData) == length(A3) ) print"yes"
if ( length(testData) == length(A3) ) print("yes")
length(testData)
length(A3)
cacheSolve(B)
cacheSolve(A)
cacheSolve(testData)
cacheSolve(A)
A$getsolve()
A$$getinv()
A$getinv()
A$getsolve()
B$set(testData)
B$getsolve()
A$set(testData)
B1 <- A$set(testData)
B1
A$set(testData)
A
A$set(testData)
B2 <- A$getsolve()
B2
A$set(testData)
B2 <- A$getsolve()
cacheSolve(B2)
B2
cacheSolve(A)
B3 <- cacheSolve(A)
cacheSolve(B3)
B3
A$set(B3)
A
A$set(B3)
A$getsolve()
A$set(B3)
B4 <- A$getsolve()
identical(B4, testData)
B4
A
B3
testData
A$set(testData)
A
testData
A$getsolve()
cacheSolve(A)
B3 <- cacheSolve(A)
identical(B3, testData)
B3
testData
cacheSolve(A)
B3
A$set(B3)
cacheSolve(B3)
B3 <- cacheSolve(A)
cacheSolve(B3)
B5 <- cacheSolve(A)
B5
identical(B5, testData)
B5
testData
identical(testData, B5)
length(B5)
length(testData)
identical(B5, testData)
rm()
A <- makeCacheMatrix(testData)
B3 <- cacheSolve(A)
cacheSolve(B3)
A$set(B3)
cacheSolve(A)
testData
identical(cacheSolve(A), testData)
identical(, testData)
testData
B3 <- cacheSolve(A)
B3
testData + B3
ls()
rm()
ls ()
rm(list = "all")
?rm
rm(list = ls())
A <- makeCacheMatrix(testData)
B3 <- cacheSolve(A)
source("cachematrix.R")
A <- makeCacheMatrix(testData)
B3 <- cacheSolve(A)
A$set(B3)
B5 <- cacheSolve(A)
A <- makeCacheMatrix(B3)
B6 <- cacheSolve(A)
A <- makeCacheMatrix(testData)
cacheSolve(A)
testData <- magic(5)
testData <- magic(5)
A <- makeCacheMatrix(testData)
B3 <- cacheSolve(A)
A$set(B3)
B5 <- cacheSolve(A)
A <- makeCacheMatrix(B3)
B6 <- cacheSolve(A)
B5
B6
testData
identical(B5, B6)
identical(B5, testData)
identical(B6, testData)
is.dataframe(B5)
is.data.frame(B5)
is.factor(B5)
is.factor(testData)
is.matrix(testData)
is.matrix(B5)
is.matrix(B6)
testData <- magic(5)
A <- makeCacheMatrix(testData)
A
a$get
A$get
A$getsolve()
cacheSolve(A)
cacheSolve(A)
testData <- magic(5)
A <- makeCacheMatrix(testData)
B3 <- cacheSolve(A)
B4 <- cacheSolve(A)
identical(B4, B3)
identical(B4, testData)
A <- makeCacheMatrix(B3)
B6 <- cacheSolve(A)
A
B6
testData
identical(B6, testData)
identical(B6, B5)
A <- makeCacheMatrix(testData)
B3 <- cacheSolve(A)
B4 <- cacheSolve(A)
B3
B$
a
A$set(B3)
B5 <- cacheSolve(A)
B6 <- cacheSolve(A)
B6
B5
A2 <- makeCacheMatrix(B3)
B7 <- cacheSolve(A2)
B7
testData
dim(testData)
dim(b7)
dim(B7)
str(testData)
str(B7)
identical(as.numeric(testData),B7)
str(as.numeric(testData))
str(B7)
? as.numeric
identical(as.numeric(testData),as.numeric(B7)
)
str(as.numeric(testData))
str(as.numeric(B7))
as.integer(B7)
as.integer(testData)
str(as.integer(B7))
str(as.integer(testData))
identical(as.integer(testData),as.integer(B7))
? identical
identical(as.integer(testData),as.integer(B7),ignore.environment = FALSE)
identical(as.integer(testData),as.integer(B7),ignore.environment = FALSE,ignore.bytecode=TRUE)
identical(as.integer(testData),as.integer(B7),num.eq = FALSE)
identical(as.integer(testData),as.integer(B7),FALSE,FALSE,FALSE,FALSE)
all.equal(testData,B7)
all.equal(testData,B6)
library(magic)
testData <- magic(5)
A <- makeCacheMatrix(testData)
A1 <- A$get
A2 <- A$getsolve
if ( identical(A1,testData) ) print("makeCacheMatrix$get : PASS")
if ( is.null(A2) ) print("makeCacheMatrix$getsolve: NULL : PASS")
cacheSolve(A) ### first time; w/o cache
A3 <- A$getsolve()
if ( length(testData) == length(A3) ) ("makeCacheMatrix$getsolve: Matrix exists and length of test data : PASS")
A4 <- cacheSolve(A)
if ( identical(A1,testData) ) print("makeCacheMatrix$getsolve: identical to cacheSolve : PASS")
A$set(testData)
B2 <- A$getsolve()
if ( is.null(B2) ) print("makeCacheMatrix$getsolve: reset and check NULL : PASS")
B3 <- cacheSolve(A)
A$set(B3)
B4 <- A$getsolve()
if ( is.null(B4) ) print("makeCacheMatrix$getsolve: set the inverse as data and NULL check : PASS")
B5 <- cacheSolve(A)
if (all.equal(testData,B5)) print("cacheSolve: reset the data to inverse of testData and compare the cacheSolve of the inverse data and test Data for equality: PASS")
cacheSolve(B)
cacheSolve(B)
if ( is.null(B4) ) print("makeCacheMatrix$getsolve: set the inverse as data and NULL check : PASS")
if ( length(testData) == length(A3) ) {
rs = "PASS"
} else { rs = "FAIL" }
print("makeCacheMatrix$getsolve: Matrix exists and length of test data : %s", rs)
?print
if ( length(testData) == length(A3) ) {
rs = "PASS"
} else { rs = "FAIL" }
print(c("makeCacheMatrix$getsolve: Matrix exists and length of test data : ", rs)
)
if ( length(testData) == length(A3) ) {
rs = "PASS"
} else { rs = "FAIL" }
print("makeCacheMatrix$getsolve: Matrix exists and length of test data : " rs)
if ( length(testData) == length(A3) ) {
rs = "PASS"
} else { rs = "FAIL" }
print("makeCacheMatrix$getsolve: Matrix exists and length of test data :  rs")
if ( length(testData) == length(A3) ) {
rs = "PASS"
} else { rs = "FAIL" }
print("makeCacheMatrix$getsolve: Matrix exists and length of test data :  "rs)
if ( length(testData) == length(A3) ) {
rs = "PASS"
} else { rs = "FAIL" }
print("makeCacheMatrix$getsolve: Matrix exists and length of test data :  ", rs)
if ( length(testData) == length(A3) ) {
rs = "PASS"
} else { rs = "FAIL" }
print(paste("makeCacheMatrix$getsolve: Matrix exists and length of test data :  ", rs))
if ( length(testData) == length(A3) ) { rs = "PASS"; pcnt = pcnt + 1 }
pcnt = 0
if ( length(testData) == length(A3) ) { rs = "PASS"; pcnt = pcnt + 1 }
rs
pcnt
source("UT_cachematrix.R")
rs = "FAIL";
tcnt = tcnt + 1;
tcnt = 0
rs = "FAIL";
tcnt = tcnt + 1;
rs
tcnt
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
pcnt = 0;
tcnt = 0;
testData <- magic(5)
A <- makeCacheMatrix(testData)
A1 <- A$get
A2 <- A$getsolve
A2
A1
A$get
A <- makeCacheMatrix(testData)
A
A$get(A)
A1 <- A$get()
A
A1
testData <- magic(5)
A <- makeCacheMatrix(testData)
A1 <- A$get()
A2 <- A$getsolve()
identical((A1,testData))
identical(A1,testData)
A2
source("UT_cachematrix.R")
source("UT_cachematrix.R")
x <- "identical(i1,i2) && identical(t1,t2)"
x
if ( x ) print("yes")
if ( `x` ) print("yes")
testCase <- function(test){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { print("yes") }
}
testCase(identical(i1,i2) && identical(t1,t2))
pcnt = 0;
tcnt = 1;
rs <- "";
testCase <- function(test){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
rs <- "FAIL"
tcnt <- tcnt + 1
}
testCase(identical(i1,i2) && identical(t1,t2))
testCase(identical(i1,i2) && identical(t1,t2))
testCase(identical(i1,i2) && identical(t1,t2),1)
testCase <- function(test,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
rs <- "FAIL"
tcnt <- tcnt + 1
}
testCase(identical(i1,i2) && identical(t1,t2),1)
testCase(identical(i1,i2) && identical(t1,t2),1)
testCase(identical(i1,i2) && identical(t1,t2),2)
tcnt
testCase[tcnt] <- function(test,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
rs <- "FAIL"
tcnt <- tcnt + 1
}
testCase <- function(test,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
rs <- "FAIL"
tcnt <- tcnt + 1
tcnt
}
testCase(identical(i1,i2) && identical(t1,t2),2)
testCase(identical(i1,i2) && identical(t1,t2),2)
testCase(identical(i1,i2) && identical(t1,t2),3)
testCase <- function(test,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
rs <- "FAIL"
tcnt <- tcnt + 1
invisible(tcnt)
}
testCase(identical(i1,i2) && identical(t1,t2),2)
testCase$tcnt
str(testCase)
testCase(identical(i1,i2) && identical(t1,t2),testCase(identical(i1,i2) && identical(t1,t2),3)
)
t <- testCase(identical(i1,i2) && identical(t1,t2),2)
t
testCase <- function(test,pcnt,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
rs <- "FAIL"
tcnt <- tcnt + 1
}
t <- testCase(identical(i1,i2) && identical(t1,t2),2)
t <- testCase(identical(i1,i2) && identical(t1,t2),1,2)
t
tcnt++
;
tcnt = tcnt + 1
tcnt
cnt <- c(pcnt, tcnt = tcnt + 1)
testCase <- function(test,pcnt,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
rs <- "FAIL"
cnt <- c(pcnt, tcnt = tcnt + 1)
}
t <- testCase(identical(i1,i2) && identical(t1,t2),1,2)
t
t[1]
t[2]
t <- testCase(FALSE,1,2)
t
t <- testCase(TRUE,1,2)
t
str(t[1])
str(t[2])
matrix(1,2)
testCase <- function(test,pcnt,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
rs <- "FAIL"
cnt <- matrix(pcnt, tcnt = tcnt + 1)
}
t <- testCase(TRUE,1,2)
matrix(pcnt, tcnt = tcnt + 1)
matrix(pcnt, (tcnt = tcnt + 1)
)
testCase <- function(test,pcnt,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
rs <- "FAIL"
cnt <- matrix(pcnt, (tcnt = tcnt + 1))
}
t <- testCase(TRUE,1,2)
t
testCase <- function(test,pcnt,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
rs <- "FAIL"
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
tcnt = tcnt + 1
cnt <- matrix(pcnt, tcnt)
}
t <- testCase(TRUE,1,2)
t
t <- testCase(TRUE,1,1)
t
matrix(3,3)
matrix(3,2)
matrix(,2)
matrix(paste(1,2))
matrix(c(1,2))
c(1,2)
t <- c(1,2)
t
t[1,1]
t[1]
t[2]
t <- c(1,3)
t[2]
t[1]
testCase <- function(test,pcnt,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
rs <- "FAIL"
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". Identify matrix cross check : ", rs))
tcnt = tcnt + 1
cnt <- c(pcnt, tcnt)
}
testCase(TRUE,1,2)
t
t <- testCase(TRUE,1,2)
t
t <- testCase(FALSE,1,2)
t
testCase <- function(test,str,pcnt,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
rs <- "FAIL"
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". ",str,"" : ", rs))
tcnt = tcnt + 1
cnt <- c(pcnt, tcnt)
}
t <- testCase(FALSE,"Welcome",1,2)
t <- testCase(FALSE,'Welcome',1,2)
testCase <- function(test,str,pcnt,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
rs <- "FAIL"
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". ",str,"" : ", rs))
tcnt = tcnt + 1
cnt <- c(pcnt, tcnt)
}
t <- testCase(FALSE,'Welcome',1,2)
""
"
testCase <- function(test,str,pcnt,tcnt){
#if ( identical(i1,i2) && identical(t1,t2) )  { rs = "PASS"; pcnt = pcnt + 1 }
rs <- "FAIL"
if ( test ) { rs = "PASS"; pcnt = pcnt + 1 }
print(paste(tcnt,". ",str," : ", rs))
tcnt = tcnt + 1
cnt <- c(pcnt, tcnt)
}
t <- testCase(FALSE,'Welcome',1,2)
t
t[1]
t[2]
t <- testCase(FALSE,'No No',t[1],t[2])
t
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
rm(list = ls())
source("UT_cachematrix.R")
A4
testData
source("UT_cachematrix.R")
A4
A2
A3
source("UT_cachematrix.R")
t[1]
t[2]
pcnt = t[1]
tcnt = t[2]
pcnt/tcnt
pcnt/tcnt*100
print(paste("Total PASS % : ",((pcnt/tcnt)*100)))
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
source("UT_cachematrix.R")
testData <- matrix(stats::rnorm(90000), nrow=300, ncol=300)
test <- makeCacheMatrix(testData)
system.time(t1 <- cacheSolve(test)) ## first call; w/o cache
system.time(t2 <- cacheSolve(test)) ## second call; with cache
testData <- matrix(stats::rnorm(90000), nrow=300, ncol=300)
test <- makeCacheMatrix(testData)
system.time(t <- cacheSolve(test)) ## first call; w/o cache
system.time(t <- cacheSolve(test)) ## second call; with cache
round(t %*% testData,4)
sum(round(t %*% testData,4))
